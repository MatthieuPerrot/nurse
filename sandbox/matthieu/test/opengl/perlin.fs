# version 120
varying vec2 texture_coordinate;
uniform sampler2D sampler;

const int n = 256;
const vec2 scaling = vec2(20., 20.);
const vec2 resolution = vec2(640, 480);
const vec2 factor = scaling / resolution;

int qx0;
int qx1;
int qy0;
int qy1;

int q00;
int q10;
int q01;
int q11;

vec2 coord;
vec4 tex;

// gradient
const float Gx[n] = float[](-0.28594723,  0.81951902,  0.89511045,  0.00930835,  0.92652302, -0.69622127,  0.82980624,  0.57410785, -0.83846563,  0.72598255, 0.29065073,  0.32431519,  0.3913068 , -0.77534692, -0.37797616, 0.94610137, -0.09147007, -0.90925329, -0.23610744,  0.94777053, -0.01310242, -0.73272537,  0.22562658,  0.84132116,  0.6365312 , 0.28072179, -0.99756023, -0.65568108,  0.76339976, -0.50075686, 0.87249614,  0.89818474,  0.81278868, -0.50056986, -0.95217052, 0.87539736, -0.10896708, -0.02885418, -0.23576272, -0.83905235, -0.58515109, -0.25420561,  0.93527503,  0.9776514 ,  0.33164409, -0.08937255, -0.94023517, -0.61612194, -0.89509794, -0.6927414 , 0.25629706,  0.37612715, -0.4769904 , -0.02532316, -0.29598439, 0.01385704, -0.26873217,  0.87237833,  0.98682531, -0.86988862, 0.94772544, -0.98904948, -0.83245286,  0.69578521, -0.63758417, 0.15292104,  0.36259972, -0.44906432,  0.3503161 ,  0.96974646, 0.24419038,  0.26357118, -0.25684949, -0.73579526,  0.70652425, -0.2102358 , -0.42974451,  0.53866607,  0.92779803,  0.34367012, -0.09196746,  0.66681762, -0.71311966,  0.81132218, -0.88303021, 0.66373785,  0.7732378 ,  0.89065912, -0.75959312,  0.63294243, -0.55982211,  0.07422757, -0.93906529,  0.13537325, -0.15402244, 0.548892  ,  0.57547123,  0.49575774,  0.99665203,  0.81840373, -0.84147289, -0.013864  ,  0.82616365, -0.22396935,  0.53710098, 0.90484147,  0.08540733,  0.37920879,  0.93704406,  0.34791295, 0.71459912,  0.83381076,  0.97633765,  0.79311033,  0.44667732, 0.38246729, -0.62345302, -0.68071539,  0.60758386,  0.46591827, -0.81898112,  0.91487497, -0.1398384 , -0.44644616, -0.01066702, -0.2722962 ,  0.02009377, -0.59762243,  0.30245973, -0.52260143, -0.55760908, -0.14655344, -0.87689682, -0.37267425,  0.56346056, -0.27862936,  0.19168741,  0.46023404,  0.07182294,  0.37228195, -0.36492402,  0.00544571, -0.97765374,  0.50374895,  0.05667617, -0.26389048,  0.12512276,  0.89634385,  0.39416825,  0.69483624, 0.40035149,  0.16437669, -0.28549609, -0.20849929, -0.97348459, -0.39079677,  0.60048474,  0.07543736, -0.79503334, -0.59846136, -0.76694862, -0.08413202,  0.17857971, -0.97998694,  0.25206175, 0.36136829,  0.70317981,  0.68774092, -0.58133077,  0.98460963, -0.13092466,  0.12029324,  0.30295051,  0.92166795,  0.08366791, -0.32741686, -0.83340956, -0.44921732, -0.84340645, -0.28663305, -0.40638203, -0.38979289,  0.06487189, -0.14126359,  0.567782  , 0.07805405, -0.22215148,  0.52734342,  0.6254111 , -0.58021156, -0.69244745, -0.03989649, -0.11563626,  0.3316933 ,  0.80810389, -0.01035773,  0.08185657,  0.49037798,  0.21007829,  0.74650326, 0.93030919, -0.56057796,  0.92237229,  0.15830129, -0.61009865, 0.88773456, -0.39103592,  0.53986451, -0.11336679, -0.52771436, -0.86075915,  0.78930701,  0.00725972, -0.72463326,  0.07093736, 0.08060053, -0.64470887,  0.43069183,  0.36739476,  0.47839469, -0.6015481 ,  0.05184998, -0.74628337,  0.33393626, -0.59223946, -0.06679634, -0.56457222,  0.97983242,  0.61153702,  0.16977583, 0.09603644,  0.0201856 , -0.52987463,  0.5743045 ,  0.70129532, -0.35268238, -0.93383923,  0.42115731,  0.19100743, -0.88284601, 0.04026493,  0.06782602,  0.51188219, -0.44055962, -0.05775711, -0.40129532, -0.4012315 , -0.52961039, -0.90245614,  0.04881803, -0.00371203, -0.4172043 , -0.43060536, -0.27084214,  0.55213119, -0.84138545);
const float Gy[n] = float[](-0.64631028, -0.78414884, -0.90666756,  0.27066479, -0.50575628, -0.29762208,  0.8483046 , -0.44618646,  0.43722482, -0.36702369, 0.68493798, -0.51741635,  0.57525483, -0.34389056, -0.39000673, -0.48504591,  0.14465327,  0.6480692 ,  0.4315134 , -0.42111385, 0.56451666,  0.22492319, -0.70391737, -0.53338832,  0.43930955, -0.36011815, -0.56896474, -0.42526776,  0.6128299 , -0.33158402, 0.99909033,  0.44425532, -0.63525059, -0.48221722, -0.2592046 , 0.91902931,  0.92217439, -0.89926448, -0.01447512, -0.2587104 , 0.45644115, -0.64582476,  0.74325529,  0.52033047,  0.78018838, 0.78871281,  0.54215706, -0.33957968, -0.9837887 ,  0.97917672, -0.6623068 ,  0.53912   , -0.51652757, -0.74818921,  0.70900343, -0.46903932,  0.9014442 , -0.89823232,  0.05710133, -0.89730234, 0.01579533,  0.10710522,  0.14553773, -0.91350174,  0.68502191, -0.62469047,  0.50708722,  0.6237818 , -0.04355613, -0.31315104, -0.98368461,  0.50653918, -0.0522906 ,  0.07196639,  0.05863637, 0.25435618,  0.96869811,  0.06942824,  0.17016884,  0.53013006, -0.2594255 , -0.58341717, -0.10286471, -0.99494412, -0.13896867, 0.82855927,  0.6464049 ,  0.2299674 ,  0.5508356 , -0.61120566, -0.16820539, -0.88505592, -0.05162265, -0.40956597,  0.34202383, 0.69078544, -0.96500429, -0.48588405, -0.26700307, -0.62054913, -0.79815458,  0.64252838,  0.98507837,  0.6235829 ,  0.75930604, 0.24665015,  0.84516315,  0.39490853, -0.40392912,  0.69682423, -0.41822563,  0.48576595,  0.84422067,  0.75701572, -0.05730001, -0.80021229,  0.25019949, -0.28378202,  0.24993728,  0.21749386, -0.81895649,  0.53801622, -0.75753676, -0.82505304, -0.72512198, 0.68921806,  0.42329676,  0.07056138, -0.28889385,  0.74298676, 0.2660269 , -0.78252671, -0.51856436,  0.37037536, -0.50645878, 0.46376741, -0.06457805,  0.83368987, -0.09010862,  0.48703763, -0.37754928,  0.06286861, -0.03597021, -0.60472612, -0.93195058, -0.36934661, -0.62983944, -0.14901784,  0.99270902,  0.39479279, 0.23524015, -0.33731974, -0.14843088,  0.59144614, -0.30594175, -0.2538162 ,  0.38508447,  0.73375104, -0.65607964, -0.01851838, -0.70183992, -0.65739418, -0.57854064, -0.82184825, -0.85924229, -0.71234198,  0.97166833,  0.61633109,  0.34939596, -0.54132564, -0.8513405 , -0.94211214,  0.26584038,  0.52871844,  0.20860983, -0.86822903,  0.47496651,  0.11331443,  0.33723389,  0.55895931, -0.78050177,  0.06868847, -0.41171467, -0.3315666 ,  0.02276277, 0.79074572,  0.18598781, -0.54678754, -0.98608145, -0.02730034, 0.6566066 ,  0.60978733, -0.36664621,  0.48736709, -0.3501746 , 0.03563763, -0.75837611,  0.01116467,  0.60518026, -0.15312925, -0.99621649, -0.28184649,  0.59132697, -0.74042285,  0.38286779, 0.43378612,  0.05136259,  0.52817171, -0.72216219, -0.93616564, -0.95871108,  0.95499886,  0.64944125, -0.88679861,  0.82373893, 0.36794989, -0.53783319, -0.32711157,  0.72873691, -0.63137525, -0.84936045, -0.52670545,  0.08561439,  0.05199768,  0.19619286, -0.54583936,  0.06440073, -0.21899549,  0.81427871, -0.61128351, 0.82808729,  0.96332184, -0.5400833 ,  0.38330638, -0.68491193, 0.0559022 ,  0.72749063,  0.12539351, -0.78304348, -0.95316941, -0.15791469,  0.25105395, -0.99712225,  0.98265776, -0.66203359, -0.12203442, -0.14262949, -0.05714235, -0.47915916,  0.80275927, 0.08600501, -0.65406175, -0.24505186,  0.57166678,  0.15529341, 0.67354017);

// permutation
const int P[n] = int[](145, 172,  64,   5,  88, 121, 125, 237,  80, 193, 105, 252, 108, 200, 255, 236,  60, 142,  55,  16, 128, 122,  62, 239, 245, 159, 83, 156,  95, 181,  61, 216, 185,  85, 163,  15, 147, 168, 119, 120,  44, 221, 225, 180, 100, 249,  14, 191,  48, 182, 192,  37, 162, 164, 111, 152, 132, 229,  76, 222, 139,  74, 171, 194,  46, 4,   3, 127, 217, 204,  18, 150,  32,  84, 143, 151, 131,  20, 34, 157, 241, 114,  31, 170,  96, 251, 206,  53, 214, 135, 189, 38,  75,   7,  50, 253, 212,   0,  23, 136,  81, 211,  52,  92, 230,  45,  13,  27,  19, 248, 184,  90,   2, 149, 178,  35, 227, 155, 183, 113, 202,  26, 254, 240, 144, 247, 133,  29,  59,  17, 223, 158, 141,  97, 167,  89, 235,  93,  68,  21, 226,  47,  33, 109, 124, 190,  24,  66, 187, 138, 209,   8,  63,  40,  57, 186, 91,  25,  77, 102, 106, 205, 195, 134, 234,  43, 233, 118, 210, 166, 203,  12, 115,  86,  41, 246,  73,   9,  98,   1,  39, 107, 242,  36,  11, 148, 104, 196,  79,  56, 177, 154, 129,  69, 140, 213, 173, 198,  54,  10, 243, 218, 117,  58, 116, 169, 244, 101, 160, 224,  28, 123, 201, 153, 199,  72,  30,  94, 215,  67,  22, 78,  71, 231, 179, 175,  70, 112,  65,   6, 161, 146, 130, 197, 165, 208, 207,  87,  82, 188,  49, 110, 219, 137, 220, 250,  99, 51, 176, 232,  42, 238, 174, 126, 103, 228);



void main(void)
{
	coord = floor(texture_coordinate.st * resolution * factor);
	qx0 = int(coord.x);
	qx1 = qx0 + 1;
	qy0 = int(coord.y);
	qy1 = qy0 + 1;

	q00 = P[int(mod(qy0 + P[int(mod(qx0, n))], n))];
	q01 = P[int(mod(qy0 + P[int(mod(qx1, n))], n))];
	q10 = P[int(mod(qy1 + P[int(mod(qx0, n))], n))];
	q11 = P[int(mod(qy1 + P[int(mod(qx1, n))], n))];

	gl_FragColor = vec4(float(q00) / float(n), 0, 0., 1.);
	//gl_FragColor = vec4(qx0 / 20., qy0 / 20., 0., 1.);
	//gl_FragColor = vec4(tex.xyz, 1.);
}


/*
def perlin_noise(x, y):
	qx0 = np.floor(x);
	qx1 = qx0 + 1
	qy0 = np.floor(y)
	qy1 = qy0 + 1

	#Permutate values to get indices to use with the gradient look-up tables
	q00 = P[(qy0 + P[qx0 % n]) % n]
	q01 = P[(qy0 + P[qx1 % n]) % n]
	q10 = P[(qy1 + P[qx0 % n]) % n]
	q11 = P[(qy1 + P[qx1 % n]) % n]

	# Computing vectors from the four points to the input point
	tx0 = x - np.floor(x)
	ty0 = y - np.floor(y)
	tx1 = tx0 - 1
	ty1 = ty0 - 1

	# Compute the dot-product between the vectors and the gradients
	#q00, q01, q10, q11 = 0, 1, 2, 3
	#q00, q01, q10, q11 = 0, 0, 0, 0
	#G[0, 0] = 1
	#G[0, 1] = -1
	#G[0, 0] = 1
	#G[0, 1] = 0
	#G[0] = tangent_vec(x, y)
	#G[1] = tangent_vec(x + 1, y)
	#G[2] = tangent_vec(x, y + 1)
	#G[3] = tangent_vec(x + 1, y + 1)
	v00 = G[q00, 0] * tx0 + G[q00, 1] * ty0
	v01 = G[q01, 0] * tx1 + G[q01, 1] * ty0
	v10 = G[q10, 0] * tx0 + G[q10, 1] * ty1
	v11 = G[q11, 0] * tx1 + G[q11, 1] * ty1

	# bi-cubic interpolation between v_0 and v_1 at x
	# v_x = v_0 - (3x^2 - 2x^3) * (v_0 - v_1).
	# x axis interpolation
	wx = (3 - 2 * tx0) * tx0 ** 2
	v0 = v00 - wx * (v00 - v01)
	v1 = v10 - wx * (v10 - v11)
	# y axis interpolation
	wy = (3 - 2 * ty0) * ty0 ** 2
	v = v0 - wy * (v0 - v1)

	return v


def map_perlin_noise(resolution, scaling = np.array([10., 10.])):
	V = np.zeros(resolution, dtype='f')
	factor = scaling / resolution
	for x in np.arange(resolution[0]):
		xs = x * factor[0]
		for y in np.arange(resolution[1]):
			ys = y * factor[1]
			V[x, y] = perlin_noise(xs, ys)
	return V

def map_fract(resolution, scaling = np.array([10., 10.]), iter_n=5):
	scaling = np.array([10., 10.])
	V = np.zeros(resolution, dtype='f')
	for i in range(iter_n):
		s = (2 ** i)
		V += map_perlin_noise(resolution, scaling * s) / s
	return V

def map_magma(resolution, scaling = np.array([10., 10.]), iter_n=5):
	V = np.zeros(resolution, dtype='f')
	for i in range(iter_n):
		s = (2 ** i)
		P = map_perlin_noise(resolution, scaling * s)
		V += np.abs(P) / s
	return V

def map_marble(resolution, scaling = np.array([10., 10.]), iter_n=5):
	V = np.zeros(resolution, dtype='f')
	X = np.repeat(np.linspace(0, 1., resolution[1])[None], resolution[0], 0)
	for i in range(iter_n):
		s = (2 ** i)
		P = map_perlin_noise(resolution, scaling * s)
		V += np.sin(X + np.abs(P) / s)
	return V

def map_image(filename, scaling = np.array([10., 10.])):
	img = pilutil.imread(filename)
	img2 = img.copy()
	resolution = img.shape[0], img.shape[1]
	s = 100.
	X = np.repeat(np.linspace(0, 1. / s, resolution[1])[None],
						resolution[0], 0)
	Y = np.repeat(np.linspace(0, 1. / s, resolution[0])[None],
						resolution[1], 0).T
	P = map_perlin_noise(resolution, scaling)
	Vx = (np.sin(X + np.abs(P) / s)) * (resolution[1] - 1) * s
	Vy = (np.sin(Y + np.abs(P) / s)) * (resolution[0] - 1) * s
	Vx = np.minimum(np.maximum(Vx, 0), resolution[1] - 1)
	Vy = np.minimum(np.maximum(Vy, 0), resolution[0] - 1)

	for i in range(resolution[0]):
		for j in range(resolution[1]):
			#img2[i, j] = img[i, Vx[i, j]]
			img2[i, j] = img[Vy[i, j], Vx[i, j]]
	return img2


resolution = np.array([200., 200.])
#V = map_perlin_noise(resolution, scaling=np.array([11., 11.]))
#V = map_fract(resolution, scaling=np.array([4., 4.]), iter_n=8)
#V = map_magma(resolution, scaling=np.array([4., 4.]), iter_n=8)
#V = map_marble(resolution, scaling=np.array([10., 10.]), iter_n=8)
V = map_image('../../../../data/pix/hopital.png', np.array([20., 20.]))

pl.hot()
pl.imshow(V, interpolation='nearest')

pl.show()
*/
